import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
df = pd.read_excel("Task_Fatigue_1000.xlsx")
df.head()
df['motion_sensor'] = (df['Performance'] > 0.6).astype(int)
df['temp_sensor'] = (df['Energy Level'] > 0.75).astype(int)
df['neuron_fire'] = ((df['motion_sensor'] == 1) & (df['temp_sensor'] == 1)).astype(int)
plt.figure(figsize=(6,4))
sns.heatmap(df[['motion_sensor', 'temp_sensor', 'neuron_fire']].corr(), annot=True, cmap="coolwarm")
plt.title("Correlation Heatmap of Sensors and Output")
plt.tight_layout()
plt.show()
plt.figure(figsize=(5,3))
sns.countplot(data=df, x='neuron_fire', palette='Set2')
plt.title("Neuron Firing Distribution")
plt.xlabel("Neuron Fires (1 = Fire, 0 = No Fire)")
plt.ylabel("Count")
plt.tight_layout()
plt.show()
X = df[['motion_sensor', 'temp_sensor']]
y = df['neuron_fire']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train
model = Sequential()
model.add(Dense(4, input_dim=2, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer=Adam(0.01), loss='binary_crossentropy', metrics=['accuracy'])
print("\nTraining...")
history = model.fit(X_train, y_train, epochs=20, batch_size=8, verbose=1, validation_data=(X_test, y_test))
plt.figure(figsize=(10,4))

plt.subplot(1,2,1)
plt.plot(history.history['accuracy'], label='Train Acc', marker='o')
plt.plot(history.history['val_accuracy'], label='Val Acc', marker='x')
plt.title("Model Accuracy")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.legend()
plt.subplot(1,2,2)
plt.plot(history.history['loss'], label='Train Loss', marker='o')
plt.plot(history.history['val_loss'], label='Val Loss', marker='x')
plt.title("Model Loss")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.legend()
plt.tight_layout()
plt.show()
y_pred = (model.predict(X_test) > 0.5).astype(int)
cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=["No Fire", "Fire"])
disp.plot(cmap="YlGnBu")
plt.title("Confusion Matrix: Neuron Output")
plt.show()
model.save("fatigue_neuron_model.h5")
print("âœ… Model saved as fatigue_neuron_model.h5")
